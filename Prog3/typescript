Script started on Fri 06 Nov 2020 11:43:51 PM EST
]0;barry_jr@cobra:~/csc245/Prog3[?1034h[barry_jr@cobra Prog3]$ at [K[K[Kcat [K[K[K[Kcat -n zip.cpp
     1	#include <iostream>
     2	#include <fstream>
     3	#include <string>
     4	#include <map>
     5	#include <vector>
     6	#include <iomanip>
     7	#include <cstdlib>
     8	#include <algorithm>
     9	#include "huffman.h"
    10	#include <stdlib.h>
    11	#include <cctype>
    12	using namespace std;
    13	
    14	int main(int argc, char** argv)//Main method
    15	{
    16	    bool tableEnabled=false;//Bool to check if the table is supposed to be printed
    17	    string fileName=argv[1];
    18	    string dashT=argv[1];
    19	    string dashH=argv[1];
    20	    const int NumLetters = 256;
    21	    int Letters[NumLetters];
    22	    int header=0;//Holds the top number in the zip file 
    23	    int numChars=0;
    24	    int characters=0;
    25	    char ch;
    26	    HuffmanTree T;
    27	    string s;
    28	    int compressed = 0;
    29		float compressratio;
    30	
    31	    if(dashT=="--t")//Checking for user input for table 
    32	  	{
    33	   	fileName = argv[2];
    34			tableEnabled = true;
    35	    }
    36	
    37	    else if(dashH =="--help")//Checking for user input for help options
    38	    {
    39	        string printHelp;
    40	        ifstream help;
    41	        help.open("help");
    42	        while(getline(help, printHelp))
    43	        {
    44	          cout << printHelp << endl;
    45	        }
    46	        help.close();
    47			    return 0;
    48	  	}
    49	
    50	    else
    51	    {
    52	      if(argc==1)//Checking if no file was input on the command line
    53	      {
    54	          cout << "No filename entered. Please enter a filename. Program Terminated." << endl;
    55	          return 0;
    56	      }
    57	    }
    58	
    59	    ifstream infile;        
    60	    ofstream outfile;
    61	    string line;
    62	    
    63	    infile.open(fileName.c_str()); //Opening the input file
    64	
    65	    for (char ch = char(0);  ch <= char(126);  ch++)//Getting the characters from the input file 
    66		  {
    67			  Letters[ch] = 0;
    68		  }
    69	    infile.get(ch);
    70		  while (infile)
    71		  {
    72	      Letters[ch] += 1;
    73	      s+=ch;
    74	      infile.get(ch);
    75		  }
    76	
    77	  for (char ch = char(0); ch <= char(126); ch++)//Building the tree
    78			if ((Letters[ch] != 0) && (ch != '\n') && (ch != ' '))
    79			{
    80				T.insert(ch, Letters[ch]);
    81				header++;
    82			}
    83			else if ((Letters[ch] != 0) && (ch == '\n'))
    84			{
    85				T.insert('^', Letters[ch]);
    86				header++;
    87			}
    88			else if ((Letters[ch] != 0) && (ch == ' '))
    89			{
    90	      T.insert('$', Letters[ch]);
    91				header++;
    92			}
    93	      
    94	    
    95	    
    96	    T.build();//Sorting the tree 
    97		if(tableEnabled)//Checking to see if the table needs to be printed
    98	    {
    99	    		T.PrintTable();		
   100	    }
   101	   	infile.close();
   102		remove(fileName.c_str());
   103	    string zipFileName=fileName+".zip";//Makes the zip file name
   104	    outfile.open(zipFileName.c_str());
   105	    outfile << header << endl; //Puts the header in the zip file 
   106	    int inputNum;
   107	    for (char ch = char(0); ch <= char(126); ch++)//Prints out the zip file info
   108			{
   109				if ((Letters[ch] != 0) && (ch != '\n') && (ch != ' '))
   110				{
   111					outfile << (int)ch << " " << T.GetCode(ch) << endl;
   112					inputNum++;
   113				}
   114				else if ((Letters[ch] != 0) && (ch == '\n'))
   115				{
   116					outfile << (int)ch << " " << T.GetCode('^') << endl;
   117					inputNum++;
   118				}
   119				else if ((Letters[ch] != 0) && (ch == ' '))
   120				{
   121					outfile << (int)ch << " " << T.GetCode('$') << endl;
   122					inputNum++;
   123				}
   124			}
   125	    	char code;
   126			for (int i = 0; i < s.length(); i++)//Prints out the encoded string
   127			{
   128				code = s[i];
   129				outfile << T.GetCode(code);
   130				compressed++;
   131			}
   132			outfile << endl;
   133			outfile.close();
   134			compressratio = (1 - (float)(compressed / ((float)inputNum * 8))) * 100;//Prints out the compression info
   135			cout << "File Successfully Compressed to " << compressed << " Bits (" << compressratio << "% Less)" << endl;
   136	  	
   137	   
   138	   return 0;
   139	}]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ cat huffman.h
#include <vector>
#include <string>
using namespace std;

struct HNode {
    char ch;
    int weight;
    int parent;
    int childType;
};

class HuffmanTree {
    public:
	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree
		
	int GetFrequency(char ch);		// returns the weight of a given character

	
	void build();				// Builds the Huffman Tree;
	

	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process
	
	int numNodes();				// returns the number of nodes currently in Huffman 
						// tree
	int lowestFrequency(vector<int>& array);//finds the lowest frequency.

    private:
	vector<HNode> nodes;
	int numChars;
	bool built;                             
	bool isInArray(vector<int> array2, int index);
	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at 
						// a given index
};
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ cat huffman.cpp
#include "huffman.h"
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}

void HuffmanTree:: insert(char ch, int weight) 
{
    HNode newNode = {ch, weight, -1, -1}; 
    built = false;
    nodes.push_back(newNode);
    numChars++;
}

bool HuffmanTree:: inTree(char ch) 
{
    bool found=false;
    for(int i=0;i<nodes.size();i++)
    {
        if(nodes[i].ch==ch)
        {
            found=true; 
        }
    }
    return found;
}

int HuffmanTree:: GetFrequency(char ch) 
{
    if(!inTree(ch))
    {
        cout<< "Character is not in the tree!" << endl;
        return -1;
    }
    else
    {
       return nodes[lookUp(ch)].weight;
    }
    
}

int HuffmanTree:: GetFrequency(int i) 
{
        int frequency;
        for(int j=0;j<nodes.size();j++)
        {
            if(nodes[j].ch==i)
            {
                frequency++;
            }
        }
        return frequency;
    
}

int HuffmanTree:: lookUp(char ch) 
{
    int i = 0;
	while (i < numChars)
	{
		if (nodes[i].ch == ch)
		{
			return i;
		}
		i++;
	}
	return -1;
}

string HuffmanTree:: GetCode(char ch) 
{
	return GetCode(lookUp(ch)); 
}


string HuffmanTree:: GetCode(int i) 
{
	if (nodes[i].parent == -1)
	{
		return ""; 
	}	
	else
	{
		return (GetCode(nodes[i].parent) + (char)(nodes[i].childType + '0'));
	}
		
}

void HuffmanTree:: PrintTable() 
{
    int tcount = 1;
	printf("\t++++ Encoding Table ++++\n\n");
	printf("Index\tChar\tWeight\tParent\tChildType\n");
	for (int i = 0; i < numChars; i++)
	{
		if (nodes[i].ch != ' ' && nodes[i].ch != '\0') 
		{ 
			cout << i << "\t" << nodes[i].ch << "\t" << nodes[i].weight << "\t" << nodes[i].parent << "\t" << nodes[i].childType << endl; 
		}
		else if (nodes[i].ch == '\0' && nodes[i].childType != -1)
		{
			cout << i << "\t" << 'T' << tcount << "\t" << nodes[i].weight << "\t" << nodes[i].parent << "\t" << nodes[i].childType << endl;
			tcount++;
		}
		else 
		{
			cout << i << "\t" << 'T' << tcount << "\t" << nodes[i].weight << "\t" << "0" << "\t" << "-1" << endl; 
		}
	}
}

int HuffmanTree:: numNodes() 
{
    return numChars;
}

void HuffmanTree:: build() 
{
	vector<int> array;
	while(!built)
    {
		int minFreq= lowestFrequency(array);
		array.push_back(minFreq);
		int minFreq2 = lowestFrequency(array);
		array.push_back(minFreq2);
		int mergedFreq=nodes[minFreq].weight + nodes[minFreq2].weight;
		insert('\0', mergedFreq);
		nodes[minFreq].parent = nodes.size()-1;
		nodes[minFreq2].parent = nodes.size()-1;
		nodes[minFreq].childType = 0;
		nodes[minFreq2].childType = 1;
		int counter=0;
		for (int i = 0; i < nodes.size(); i++) 
		{
			if (nodes[i].parent == -1) 
			{ 
				counter++; 
			}
		}
		if (counter == 1) 
		{ 
			built = true; 
		}
	}

		
}

int HuffmanTree::lowestFrequency(vector<int>& array) 
{
	int lowestVal = 10000;
	int index = -1;
	for (int i = 0; i < nodes.size(); i++) 
	{
		if ((nodes[i].weight < lowestVal) && !isInArray(array, i)) 
		{
			lowestVal = nodes[i].weight;
			index = i;
		}
	}
	return index;
}

bool HuffmanTree::isInArray(vector<int> array, int index) 
{
	for (int i = 0; i < array.size(); i++) 
	{
		if (array[i] == index) 
		{ 
			return true; 
		}
	}
	return false;
}
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ cat huffman.cpp[2Ph-n zip.cppls[Ka.out --t sample4c++ zip.cpp huffman.o[4Pa.out --t sample4c++ zip.cpp huffman.o
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ mv a.out myZip
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ c++ unzip.cpp
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ mv a.out myUnzip
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ mv a.out myUnzip[3Pc++ unzip.cppmv a.out myZip[1Pc++ unzip.cppmv a.out myZipc++ zip.cpp huffman.o[7Pmv a.out myZip[1Pc++ unzip.cpp
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ c++ unzip.cppmv a.out myUnzip[3Pc++ unzip.cppmv a.out myZipc++ zip.cpp huffman.o[6Pat huffman.cpp[2Ph-n zip.cppls[Ka.out --t sample4c++ zip.cpp huffman.o[4Pa.out --t sample4[1Psample4[1Psample4[1Psample4[1Psample4[1Psample4 sample4[C[C[C[C[C[C[C.zip[1P.zip1.zip
File Successfully Inflated Back to Original.
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ a.out sample1.zip[4Pc++ unzip.cppmv a.out myUnzip[3Pc++ unzip.cppmv a.out myZipc++ zip.cpp huffman.o[6Pat huffman.cpp[2Phcpp++ zip.cpp huffman.o
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ c++ zip.cpp huffman.o[4Pa.out sample1.zip[4Pc++ unzip.cppa.out sample1.zip[C[K[K[K[K-sample1-sample1tsample1 sample1
Segmentation fault (core dumped)
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ a.out --t sample1c++ zip.cpp huffman.o[4Pa.out --t sample1c++ zip.cpp huffman.o
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ c++ zip.cpp huffman.o[4Pa.out --t sample1[K2
	++++ ENCODING TABLE ++++

Index	Char	Weight	Parent	ChildType
0	^	1	12	0
1	$	11	20	1
2	A	3	14	1
3	E	1	12	1
4	I	2	13	0
5	S	3	15	0
6	T	3	15	1
7	a	5	17	0
8	e	6	18	0
9	i	2	13	1
10	s	3	16	0
11	t	6	18	1
12	T1	2	14	0
13	T2	4	16	1
14	T3	5	17	1
15	T4	6	19	0
16	T5	7	19	1
17	T6	10	20	0
18	T7	12	21	0
19	T8	13	21	1
20	T9	21	22	0
21	T10	25	22	1
22	T11	46	0	N/A 
File Successfully Compressed to 46 Bits (52.0833% Less)
]0;barry_jr@cobra:~/csc245/Prog3[barry_jr@cobra Prog3]$ exit
exit

Script done on Fri 06 Nov 2020 11:48:13 PM EST
